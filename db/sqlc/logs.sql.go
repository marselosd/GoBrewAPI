// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: logs.sql

package db

import (
	"context"
	"database/sql"
)

const createLogs = `-- name: CreateLogs :one
INSERT INTO logs(
    "from_employee", "coffee", "made_at"
) VALUES (
    $1, $2, $3
) RETURNING id, from_employee, coffee, made_at
`

type CreateLogsParams struct {
	FromEmployee int64        `json:"from_employee"`
	Coffee       int64        `json:"coffee"`
	MadeAt       sql.NullTime `json:"made_at"`
}

func (q *Queries) CreateLogs(ctx context.Context, arg CreateLogsParams) (Log, error) {
	row := q.db.QueryRowContext(ctx, createLogs, arg.FromEmployee, arg.Coffee, arg.MadeAt)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.FromEmployee,
		&i.Coffee,
		&i.MadeAt,
	)
	return i, err
}

const deleteLogs = `-- name: DeleteLogs :exec
DELETE FROM logs WHERE id = $1
`

func (q *Queries) DeleteLogs(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLogs, id)
	return err
}

const getLogs = `-- name: GetLogs :one
SELECT id, from_employee, coffee, made_at FROM logs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLogs(ctx context.Context, id int64) (Log, error) {
	row := q.db.QueryRowContext(ctx, getLogs, id)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.FromEmployee,
		&i.Coffee,
		&i.MadeAt,
	)
	return i, err
}

const listLogs = `-- name: ListLogs :many
SELECT id, from_employee, coffee, made_at FROM logs
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLogs(ctx context.Context, arg ListLogsParams) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, listLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.FromEmployee,
			&i.Coffee,
			&i.MadeAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLogs = `-- name: UpdateLogs :one
UPDATE logs
SET
    from_employee = $2,
    coffee = $3,
    made_at = $4
WHERE id = $1
RETURNING id, from_employee, coffee, made_at
`

type UpdateLogsParams struct {
	ID           int64        `json:"id"`
	FromEmployee int64        `json:"from_employee"`
	Coffee       int64        `json:"coffee"`
	MadeAt       sql.NullTime `json:"made_at"`
}

func (q *Queries) UpdateLogs(ctx context.Context, arg UpdateLogsParams) (Log, error) {
	row := q.db.QueryRowContext(ctx, updateLogs,
		arg.ID,
		arg.FromEmployee,
		arg.Coffee,
		arg.MadeAt,
	)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.FromEmployee,
		&i.Coffee,
		&i.MadeAt,
	)
	return i, err
}
