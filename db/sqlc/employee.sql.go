// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: employee.sql

package db

import (
	"context"
	"database/sql"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employee(
    "firstname", "lastname", "password", "role", "created_at", "is_admin"
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, firstname, lastname, password, role, created_at, is_admin
`

type CreateEmployeeParams struct {
	Firstname string       `json:"firstname"`
	Lastname  string       `json:"lastname"`
	Password  string       `json:"password"`
	Role      string       `json:"role"`
	CreatedAt sql.NullTime `json:"created_at"`
	IsAdmin   bool         `json:"is_admin"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRowContext(ctx, createEmployee,
		arg.Firstname,
		arg.Lastname,
		arg.Password,
		arg.Role,
		arg.CreatedAt,
		arg.IsAdmin,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employee WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmployee, id)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT id, firstname, lastname, password, role, created_at, is_admin FROM employee
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmployee(ctx context.Context, id int64) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getEmployee, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const listEmployee = `-- name: ListEmployee :many
SELECT id, firstname, lastname, password, role, created_at, is_admin FROM employee
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEmployeeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEmployee(ctx context.Context, arg ListEmployeeParams) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployee, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Password,
			&i.Role,
			&i.CreatedAt,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :one
UPDATE employee
SET
    firstname = CASE WHEN $2 IS NOT NULL THEN $2 ELSE firstname END,
    lastname = CASE WHEN $3 IS NOT NULL THEN $3 ELSE lastname END,
    password = CASE WHEN $4 IS NOT NULL THEN $4 ELSE password END,
    role = CASE WHEN $5 IS NOT NULL THEN $5 ELSE role END,
    created_at = CASE WHEN $6 IS NOT NULL THEN $6 ELSE created_at END,
    is_admin = CASE WHEN $7 IS NOT NULL THEN $7 ELSE is_admin END
WHERE id = $1
RETURNING id, firstname, lastname, password, role, created_at, is_admin
`

type UpdateEmployeeParams struct {
	ID        int64        `json:"id"`
	Firstname string       `json:"firstname"`
	Lastname  string       `json:"lastname"`
	Password  string       `json:"password"`
	Role      string       `json:"role"`
	CreatedAt sql.NullTime `json:"created_at"`
	IsAdmin   bool         `json:"is_admin"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (Employee, error) {
	row := q.db.QueryRowContext(ctx, updateEmployee,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Password,
		arg.Role,
		arg.CreatedAt,
		arg.IsAdmin,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.IsAdmin,
	)
	return i, err
}
