// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: machine.sql

package db

import (
	"context"
	"database/sql"
)

const createMachine = `-- name: CreateMachine :one
INSERT INTO machine(
    "sector", "company", "coffee_id", "last_restocked_at"
) VALUES (
    $1, $2, $3, $4
) RETURNING id, sector, company, coffee_id, last_restocked_at
`

type CreateMachineParams struct {
	Sector          string       `json:"sector"`
	Company         string       `json:"company"`
	CoffeeID        int64        `json:"coffee_id"`
	LastRestockedAt sql.NullTime `json:"last_restocked_at"`
}

func (q *Queries) CreateMachine(ctx context.Context, arg CreateMachineParams) (Machine, error) {
	row := q.db.QueryRowContext(ctx, createMachine,
		arg.Sector,
		arg.Company,
		arg.CoffeeID,
		arg.LastRestockedAt,
	)
	var i Machine
	err := row.Scan(
		&i.ID,
		&i.Sector,
		&i.Company,
		&i.CoffeeID,
		&i.LastRestockedAt,
	)
	return i, err
}

const deleteMachine = `-- name: DeleteMachine :exec
DELETE FROM machine WHERE id = $1
`

func (q *Queries) DeleteMachine(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMachine, id)
	return err
}

const getMachine = `-- name: GetMachine :one
SELECT id, sector, company, coffee_id, last_restocked_at FROM machine
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMachine(ctx context.Context, id int32) (Machine, error) {
	row := q.db.QueryRowContext(ctx, getMachine, id)
	var i Machine
	err := row.Scan(
		&i.ID,
		&i.Sector,
		&i.Company,
		&i.CoffeeID,
		&i.LastRestockedAt,
	)
	return i, err
}

const listMachine = `-- name: ListMachine :many
SELECT id, sector, company, coffee_id, last_restocked_at FROM machine
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListMachineParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMachine(ctx context.Context, arg ListMachineParams) ([]Machine, error) {
	rows, err := q.db.QueryContext(ctx, listMachine, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Machine
	for rows.Next() {
		var i Machine
		if err := rows.Scan(
			&i.ID,
			&i.Sector,
			&i.Company,
			&i.CoffeeID,
			&i.LastRestockedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMachine = `-- name: UpdateMachine :one
UPDATE machine
SET
    sector = $2,
    company = $3,
    coffee_id = $4,
    last_restocked_at = $5
WHERE id = $1
RETURNING id, sector, company, coffee_id, last_restocked_at
`

type UpdateMachineParams struct {
	ID              int32        `json:"id"`
	Sector          string       `json:"sector"`
	Company         string       `json:"company"`
	CoffeeID        int64        `json:"coffee_id"`
	LastRestockedAt sql.NullTime `json:"last_restocked_at"`
}

func (q *Queries) UpdateMachine(ctx context.Context, arg UpdateMachineParams) (Machine, error) {
	row := q.db.QueryRowContext(ctx, updateMachine,
		arg.ID,
		arg.Sector,
		arg.Company,
		arg.CoffeeID,
		arg.LastRestockedAt,
	)
	var i Machine
	err := row.Scan(
		&i.ID,
		&i.Sector,
		&i.Company,
		&i.CoffeeID,
		&i.LastRestockedAt,
	)
	return i, err
}
