// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: coffee.sql

package db

import (
	"context"
	"database/sql"
)

const createCoffee = `-- name: CreateCoffee :one
INSERT INTO coffee(
    "type", "quantity", "buyed_at", "stocked_at", "is_outstocked"
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, type, quantity, buyed_at, stocked_at, is_outstocked
`

type CreateCoffeeParams struct {
	Type         string       `json:"type"`
	Quantity     int32        `json:"quantity"`
	BuyedAt      sql.NullTime `json:"buyed_at"`
	StockedAt    sql.NullTime `json:"stocked_at"`
	IsOutstocked bool         `json:"is_outstocked"`
}

func (q *Queries) CreateCoffee(ctx context.Context, arg CreateCoffeeParams) (Coffee, error) {
	row := q.db.QueryRowContext(ctx, createCoffee,
		arg.Type,
		arg.Quantity,
		arg.BuyedAt,
		arg.StockedAt,
		arg.IsOutstocked,
	)
	var i Coffee
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Quantity,
		&i.BuyedAt,
		&i.StockedAt,
		&i.IsOutstocked,
	)
	return i, err
}

const deleteCoffee = `-- name: DeleteCoffee :exec
DELETE FROM coffee WHERE id = $1
`

func (q *Queries) DeleteCoffee(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCoffee, id)
	return err
}

const getCoffee = `-- name: GetCoffee :one
SELECT id, type, quantity, buyed_at, stocked_at, is_outstocked FROM coffee
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCoffee(ctx context.Context, id int64) (Coffee, error) {
	row := q.db.QueryRowContext(ctx, getCoffee, id)
	var i Coffee
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Quantity,
		&i.BuyedAt,
		&i.StockedAt,
		&i.IsOutstocked,
	)
	return i, err
}

const listCoffee = `-- name: ListCoffee :many
SELECT id, type, quantity, buyed_at, stocked_at, is_outstocked FROM coffee
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCoffeeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCoffee(ctx context.Context, arg ListCoffeeParams) ([]Coffee, error) {
	rows, err := q.db.QueryContext(ctx, listCoffee, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Coffee
	for rows.Next() {
		var i Coffee
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Quantity,
			&i.BuyedAt,
			&i.StockedAt,
			&i.IsOutstocked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCoffee = `-- name: UpdateCoffee :one
UPDATE coffee
SET
    quantity = CASE WHEN $2 IS NOT NULL THEN $2 ELSE quantity END,
    buyed_at = CASE WHEN $3 IS NOT NULL THEN $3 ELSE buyed_at END,
    stocked_at = CASE WHEN $4 IS NOT NULL THEN $4 ELSE stocked_at END,
    is_outstocked = CASE WHEN $5 IS NOT NULL THEN $5 ELSE is_outstocked END
WHERE id = $1
RETURNING id, type, quantity, buyed_at, stocked_at, is_outstocked
`

type UpdateCoffeeParams struct {
	ID           int64        `json:"id"`
	Quantity     int32        `json:"quantity"`
	BuyedAt      sql.NullTime `json:"buyed_at"`
	StockedAt    sql.NullTime `json:"stocked_at"`
	IsOutstocked bool         `json:"is_outstocked"`
}

func (q *Queries) UpdateCoffee(ctx context.Context, arg UpdateCoffeeParams) (Coffee, error) {
	row := q.db.QueryRowContext(ctx, updateCoffee,
		arg.ID,
		arg.Quantity,
		arg.BuyedAt,
		arg.StockedAt,
		arg.IsOutstocked,
	)
	var i Coffee
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Quantity,
		&i.BuyedAt,
		&i.StockedAt,
		&i.IsOutstocked,
	)
	return i, err
}
