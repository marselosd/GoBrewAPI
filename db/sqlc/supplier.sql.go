// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: supplier.sql

package db

import (
	"context"
	"database/sql"
)

const createSupplier = `-- name: CreateSupplier :one
INSERT INTO supplier(
    "name", "company", "password", "created_at"
) VALUES (
    $1, $2, $3, $4
) RETURNING id, name, company, password, created_at
`

type CreateSupplierParams struct {
	Name      string       `json:"name"`
	Company   string       `json:"company"`
	Password  string       `json:"password"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateSupplier(ctx context.Context, arg CreateSupplierParams) (Supplier, error) {
	row := q.db.QueryRowContext(ctx, createSupplier,
		arg.Name,
		arg.Company,
		arg.Password,
		arg.CreatedAt,
	)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Company,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSupplier = `-- name: DeleteSupplier :exec
DELETE FROM supplier WHERE id = $1
`

func (q *Queries) DeleteSupplier(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSupplier, id)
	return err
}

const getSupplier = `-- name: GetSupplier :one
SELECT id, name, company, password, created_at FROM supplier
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSupplier(ctx context.Context, id int64) (Supplier, error) {
	row := q.db.QueryRowContext(ctx, getSupplier, id)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Company,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const listSupplier = `-- name: ListSupplier :many
SELECT id, name, company, password, created_at FROM supplier
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSupplierParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSupplier(ctx context.Context, arg ListSupplierParams) ([]Supplier, error) {
	rows, err := q.db.QueryContext(ctx, listSupplier, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Supplier
	for rows.Next() {
		var i Supplier
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Company,
			&i.Password,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSupplier = `-- name: UpdateSupplier :one
UPDATE supplier
SET
    name = $2,
    company = $3,
    password = $4,
    created_at = $5
WHERE id = $1
RETURNING id, name, company, password, created_at
`

type UpdateSupplierParams struct {
	ID        int64        `json:"id"`
	Name      string       `json:"name"`
	Company   string       `json:"company"`
	Password  string       `json:"password"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) UpdateSupplier(ctx context.Context, arg UpdateSupplierParams) (Supplier, error) {
	row := q.db.QueryRowContext(ctx, updateSupplier,
		arg.ID,
		arg.Name,
		arg.Company,
		arg.Password,
		arg.CreatedAt,
	)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Company,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
