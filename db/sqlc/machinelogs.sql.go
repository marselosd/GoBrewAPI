// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: machinelogs.sql

package db

import (
	"context"
	"database/sql"
)

const createMachineLogs = `-- name: CreateMachineLogs :one
INSERT INTO machinelogs(
    "from_employee", "to_machine", "coffee", "quantity", "made_at"
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, from_employee, to_machine, coffee, quantity, made_at
`

type CreateMachineLogsParams struct {
	FromEmployee int64        `json:"from_employee"`
	ToMachine    int64        `json:"to_machine"`
	Coffee       int64        `json:"coffee"`
	Quantity     int32        `json:"quantity"`
	MadeAt       sql.NullTime `json:"made_at"`
}

func (q *Queries) CreateMachineLogs(ctx context.Context, arg CreateMachineLogsParams) (Machinelog, error) {
	row := q.db.QueryRowContext(ctx, createMachineLogs,
		arg.FromEmployee,
		arg.ToMachine,
		arg.Coffee,
		arg.Quantity,
		arg.MadeAt,
	)
	var i Machinelog
	err := row.Scan(
		&i.ID,
		&i.FromEmployee,
		&i.ToMachine,
		&i.Coffee,
		&i.Quantity,
		&i.MadeAt,
	)
	return i, err
}

const deleteMachineLogs = `-- name: DeleteMachineLogs :exec
DELETE FROM machinelogs WHERE id = $1
`

func (q *Queries) DeleteMachineLogs(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMachineLogs, id)
	return err
}

const getMachineLogs = `-- name: GetMachineLogs :one
SELECT id, from_employee, to_machine, coffee, quantity, made_at FROM machinelogs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMachineLogs(ctx context.Context, id int64) (Machinelog, error) {
	row := q.db.QueryRowContext(ctx, getMachineLogs, id)
	var i Machinelog
	err := row.Scan(
		&i.ID,
		&i.FromEmployee,
		&i.ToMachine,
		&i.Coffee,
		&i.Quantity,
		&i.MadeAt,
	)
	return i, err
}

const listMachineLogs = `-- name: ListMachineLogs :many
SELECT id, from_employee, to_machine, coffee, quantity, made_at FROM machinelogs
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListMachineLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMachineLogs(ctx context.Context, arg ListMachineLogsParams) ([]Machinelog, error) {
	rows, err := q.db.QueryContext(ctx, listMachineLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Machinelog
	for rows.Next() {
		var i Machinelog
		if err := rows.Scan(
			&i.ID,
			&i.FromEmployee,
			&i.ToMachine,
			&i.Coffee,
			&i.Quantity,
			&i.MadeAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMachineLogs = `-- name: UpdateMachineLogs :one
UPDATE machinelogs
SET
    from_employee = $2,
    to_machine = $3,
    coffee = $4,
    quantity = $5,
    made_at = $6
WHERE id = $1
RETURNING id, from_employee, to_machine, coffee, quantity, made_at
`

type UpdateMachineLogsParams struct {
	ID           int64        `json:"id"`
	FromEmployee int64        `json:"from_employee"`
	ToMachine    int64        `json:"to_machine"`
	Coffee       int64        `json:"coffee"`
	Quantity     int32        `json:"quantity"`
	MadeAt       sql.NullTime `json:"made_at"`
}

func (q *Queries) UpdateMachineLogs(ctx context.Context, arg UpdateMachineLogsParams) (Machinelog, error) {
	row := q.db.QueryRowContext(ctx, updateMachineLogs,
		arg.ID,
		arg.FromEmployee,
		arg.ToMachine,
		arg.Coffee,
		arg.Quantity,
		arg.MadeAt,
	)
	var i Machinelog
	err := row.Scan(
		&i.ID,
		&i.FromEmployee,
		&i.ToMachine,
		&i.Coffee,
		&i.Quantity,
		&i.MadeAt,
	)
	return i, err
}
